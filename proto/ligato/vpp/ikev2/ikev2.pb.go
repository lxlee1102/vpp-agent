// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/vpp/ikev2/ikev2.proto

package vpp_ikev2

import (
	proto "github.com/golang/protobuf/proto"
	_ "go.ligato.io/vpp-agent/v3/proto/ligato"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuthMethod int32

const (
	AuthMethod_NONE_AUTHM     AuthMethod = 0
	AuthMethod_RSA_SIG        AuthMethod = 1
	AuthMethod_SHARED_KEY_MIC AuthMethod = 2
)

// Enum value maps for AuthMethod.
var (
	AuthMethod_name = map[int32]string{
		0: "NONE_AUTHM",
		1: "RSA_SIG",
		2: "SHARED_KEY_MIC",
	}
	AuthMethod_value = map[string]int32{
		"NONE_AUTHM":     0,
		"RSA_SIG":        1,
		"SHARED_KEY_MIC": 2,
	}
)

func (x AuthMethod) Enum() *AuthMethod {
	p := new(AuthMethod)
	*p = x
	return p
}

func (x AuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ikev2_ikev2_proto_enumTypes[0].Descriptor()
}

func (AuthMethod) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ikev2_ikev2_proto_enumTypes[0]
}

func (x AuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthMethod.Descriptor instead.
func (AuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{0}
}

type IDType int32

const (
	IDType_NONE_IDTYPE    IDType = 0
	IDType_ID_IPV4_ADDR   IDType = 1  // ip4-addr
	IDType_ID_FQDN        IDType = 2  // fqdn
	IDType_ID_RFC822_ADDR IDType = 3  // rfc822
	IDType_ID_IPV6_ADDR   IDType = 5  // ip6-addr
	IDType_ID_DER_ASN1_DN IDType = 9  // der-asn1-dn
	IDType_ID_DER_ASN1_GN IDType = 10 // der-asn1-gn
	IDType_ID_KEY_ID      IDType = 11 // key-id
)

// Enum value maps for IDType.
var (
	IDType_name = map[int32]string{
		0:  "NONE_IDTYPE",
		1:  "ID_IPV4_ADDR",
		2:  "ID_FQDN",
		3:  "ID_RFC822_ADDR",
		5:  "ID_IPV6_ADDR",
		9:  "ID_DER_ASN1_DN",
		10: "ID_DER_ASN1_GN",
		11: "ID_KEY_ID",
	}
	IDType_value = map[string]int32{
		"NONE_IDTYPE":    0,
		"ID_IPV4_ADDR":   1,
		"ID_FQDN":        2,
		"ID_RFC822_ADDR": 3,
		"ID_IPV6_ADDR":   5,
		"ID_DER_ASN1_DN": 9,
		"ID_DER_ASN1_GN": 10,
		"ID_KEY_ID":      11,
	}
)

func (x IDType) Enum() *IDType {
	p := new(IDType)
	*p = x
	return p
}

func (x IDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDType) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ikev2_ikev2_proto_enumTypes[1].Descriptor()
}

func (IDType) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ikev2_ikev2_proto_enumTypes[1]
}

func (x IDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDType.Descriptor instead.
func (IDType) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{1}
}

type CryptoAlg int32

const (
	CryptoAlg_CRYPTO_NONE       CryptoAlg = 0
	CryptoAlg_CRYPTO_DES_IV64   CryptoAlg = 1  // des-iv64
	CryptoAlg_CRYPTO_DES        CryptoAlg = 2  // des
	CryptoAlg_CRYPTO_3DES       CryptoAlg = 3  // 3des
	CryptoAlg_CRYPTO_RC5        CryptoAlg = 4  // rc5
	CryptoAlg_CRYPTO_IDEA       CryptoAlg = 5  // idea
	CryptoAlg_CRYPTO_CAST       CryptoAlg = 6  // cast
	CryptoAlg_CRYPTO_BLOWFISH   CryptoAlg = 7  // blowfish
	CryptoAlg_CRYPTO_3IDEA      CryptoAlg = 8  // 3idea
	CryptoAlg_CRYPTO_DES_IV32   CryptoAlg = 9  // des-iv32
	CryptoAlg_CRYPTO_NULL       CryptoAlg = 11 // null
	CryptoAlg_CRYPTO_AES_CBC    CryptoAlg = 12 // aes-cbc
	CryptoAlg_CRYPTO_AES_CTR    CryptoAlg = 13 // aes-ctr
	CryptoAlg_CRYPTO_AES_GCM_16 CryptoAlg = 20 // aes-gcm-16
)

// Enum value maps for CryptoAlg.
var (
	CryptoAlg_name = map[int32]string{
		0:  "CRYPTO_NONE",
		1:  "CRYPTO_DES_IV64",
		2:  "CRYPTO_DES",
		3:  "CRYPTO_3DES",
		4:  "CRYPTO_RC5",
		5:  "CRYPTO_IDEA",
		6:  "CRYPTO_CAST",
		7:  "CRYPTO_BLOWFISH",
		8:  "CRYPTO_3IDEA",
		9:  "CRYPTO_DES_IV32",
		11: "CRYPTO_NULL",
		12: "CRYPTO_AES_CBC",
		13: "CRYPTO_AES_CTR",
		20: "CRYPTO_AES_GCM_16",
	}
	CryptoAlg_value = map[string]int32{
		"CRYPTO_NONE":       0,
		"CRYPTO_DES_IV64":   1,
		"CRYPTO_DES":        2,
		"CRYPTO_3DES":       3,
		"CRYPTO_RC5":        4,
		"CRYPTO_IDEA":       5,
		"CRYPTO_CAST":       6,
		"CRYPTO_BLOWFISH":   7,
		"CRYPTO_3IDEA":      8,
		"CRYPTO_DES_IV32":   9,
		"CRYPTO_NULL":       11,
		"CRYPTO_AES_CBC":    12,
		"CRYPTO_AES_CTR":    13,
		"CRYPTO_AES_GCM_16": 20,
	}
)

func (x CryptoAlg) Enum() *CryptoAlg {
	p := new(CryptoAlg)
	*p = x
	return p
}

func (x CryptoAlg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoAlg) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ikev2_ikev2_proto_enumTypes[2].Descriptor()
}

func (CryptoAlg) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ikev2_ikev2_proto_enumTypes[2]
}

func (x CryptoAlg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoAlg.Descriptor instead.
func (CryptoAlg) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{2}
}

type IntegAlg int32

const (
	IntegAlg_AUTH_NONE              IntegAlg = 0  // none
	IntegAlg_AUTH_HMAC_MD5_96       IntegAlg = 1  // md5-96
	IntegAlg_AUTH_HMAC_SHA1_96      IntegAlg = 2  // sha1-96
	IntegAlg_AUTH_DES_MAC           IntegAlg = 3  // des-mac
	IntegAlg_AUTH_KPDK_MD5          IntegAlg = 4  // kpdk-md5
	IntegAlg_AUTH_AES_XCBC_96       IntegAlg = 5  // aes-xcbc-96
	IntegAlg_AUTH_HMAC_MD5_128      IntegAlg = 6  // md5-128
	IntegAlg_AUTH_HMAC_SHA1_160     IntegAlg = 7  // sha1-160
	IntegAlg_AUTH_AES_CMAC_96       IntegAlg = 8  // cmac-96
	IntegAlg_AUTH_AES_128_GMAC      IntegAlg = 9  // aes-128-gmac
	IntegAlg_AUTH_AES_192_GMAC      IntegAlg = 10 // aes-192-gmac
	IntegAlg_AUTH_AES_256_GMAC      IntegAlg = 11 // aes-256-gmac
	IntegAlg_AUTH_HMAC_SHA2_256_128 IntegAlg = 12 // hmac-sha2-256-128
	IntegAlg_AUTH_HMAC_SHA2_384_192 IntegAlg = 13 // hmac-sha2-384-192
	IntegAlg_AUTH_HMAC_SHA2_512_256 IntegAlg = 14 // hmac-sha2-512-256
)

// Enum value maps for IntegAlg.
var (
	IntegAlg_name = map[int32]string{
		0:  "AUTH_NONE",
		1:  "AUTH_HMAC_MD5_96",
		2:  "AUTH_HMAC_SHA1_96",
		3:  "AUTH_DES_MAC",
		4:  "AUTH_KPDK_MD5",
		5:  "AUTH_AES_XCBC_96",
		6:  "AUTH_HMAC_MD5_128",
		7:  "AUTH_HMAC_SHA1_160",
		8:  "AUTH_AES_CMAC_96",
		9:  "AUTH_AES_128_GMAC",
		10: "AUTH_AES_192_GMAC",
		11: "AUTH_AES_256_GMAC",
		12: "AUTH_HMAC_SHA2_256_128",
		13: "AUTH_HMAC_SHA2_384_192",
		14: "AUTH_HMAC_SHA2_512_256",
	}
	IntegAlg_value = map[string]int32{
		"AUTH_NONE":              0,
		"AUTH_HMAC_MD5_96":       1,
		"AUTH_HMAC_SHA1_96":      2,
		"AUTH_DES_MAC":           3,
		"AUTH_KPDK_MD5":          4,
		"AUTH_AES_XCBC_96":       5,
		"AUTH_HMAC_MD5_128":      6,
		"AUTH_HMAC_SHA1_160":     7,
		"AUTH_AES_CMAC_96":       8,
		"AUTH_AES_128_GMAC":      9,
		"AUTH_AES_192_GMAC":      10,
		"AUTH_AES_256_GMAC":      11,
		"AUTH_HMAC_SHA2_256_128": 12,
		"AUTH_HMAC_SHA2_384_192": 13,
		"AUTH_HMAC_SHA2_512_256": 14,
	}
)

func (x IntegAlg) Enum() *IntegAlg {
	p := new(IntegAlg)
	*p = x
	return p
}

func (x IntegAlg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegAlg) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ikev2_ikev2_proto_enumTypes[3].Descriptor()
}

func (IntegAlg) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ikev2_ikev2_proto_enumTypes[3]
}

func (x IntegAlg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegAlg.Descriptor instead.
func (IntegAlg) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{3}
}

type DHType int32

const (
	DHType_DH_NONE       DHType = 0  // none
	DHType_MODP_768      DHType = 1  // modp-768
	DHType_MODP_1024     DHType = 2  // modp-1024
	DHType_MODP_1536     DHType = 5  // modp-1536
	DHType_MODP_2048     DHType = 14 // modp-2048
	DHType_MODP_3072     DHType = 15 // modp-3072
	DHType_MODP_4096     DHType = 16 // modp-4096
	DHType_MODP_6144     DHType = 17 // modp-6144
	DHType_MODP_8192     DHType = 18 // modp-8192
	DHType_ECP_256       DHType = 19 // ecp-256
	DHType_ECP_384       DHType = 20 // ecp-384
	DHType_ECP_521       DHType = 21 // ecp-521
	DHType_MODP_1024_160 DHType = 22 // modp-1024-160
	DHType_MODP_2048_224 DHType = 23 // modp-2048-224
	DHType_MODP_2048_256 DHType = 24 // modp-2048-256
	DHType_ECP_192       DHType = 25 // ecp-192
)

// Enum value maps for DHType.
var (
	DHType_name = map[int32]string{
		0:  "DH_NONE",
		1:  "MODP_768",
		2:  "MODP_1024",
		5:  "MODP_1536",
		14: "MODP_2048",
		15: "MODP_3072",
		16: "MODP_4096",
		17: "MODP_6144",
		18: "MODP_8192",
		19: "ECP_256",
		20: "ECP_384",
		21: "ECP_521",
		22: "MODP_1024_160",
		23: "MODP_2048_224",
		24: "MODP_2048_256",
		25: "ECP_192",
	}
	DHType_value = map[string]int32{
		"DH_NONE":       0,
		"MODP_768":      1,
		"MODP_1024":     2,
		"MODP_1536":     5,
		"MODP_2048":     14,
		"MODP_3072":     15,
		"MODP_4096":     16,
		"MODP_6144":     17,
		"MODP_8192":     18,
		"ECP_256":       19,
		"ECP_384":       20,
		"ECP_521":       21,
		"MODP_1024_160": 22,
		"MODP_2048_224": 23,
		"MODP_2048_256": 24,
		"ECP_192":       25,
	}
)

func (x DHType) Enum() *DHType {
	p := new(DHType)
	*p = x
	return p
}

func (x DHType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHType) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ikev2_ikev2_proto_enumTypes[4].Descriptor()
}

func (DHType) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ikev2_ikev2_proto_enumTypes[4]
}

func (x DHType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHType.Descriptor instead.
func (DHType) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{4}
}

type Ikev2Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Profile name
	Name             string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Auth             *Ikev2Profile_Auth              `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Id               []*Ikev2Profile_EndId           `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	Responder        *Ikev2Profile_ResponderInfo     `protobuf:"bytes,4,opt,name=responder,proto3" json:"responder,omitempty"`
	TrafficSelector  []*Ikev2Profile_TrafficSelector `protobuf:"bytes,5,rep,name=traffic_selector,json=trafficSelector,proto3" json:"traffic_selector,omitempty"`
	IkeTransforms    *Ikev2Profile_IkeTransforms     `protobuf:"bytes,6,opt,name=ike_transforms,json=ikeTransforms,proto3" json:"ike_transforms,omitempty"`
	EspTransforms    *Ikev2Profile_EspTransforms     `protobuf:"bytes,7,opt,name=esp_transforms,json=espTransforms,proto3" json:"esp_transforms,omitempty"`
	LifeTime         uint64                          `protobuf:"varint,8,opt,name=life_time,json=lifeTime,proto3" json:"life_time,omitempty"`
	LifeTimeMaxdata  uint64                          `protobuf:"varint,9,opt,name=life_time_maxdata,json=lifeTimeMaxdata,proto3" json:"life_time_maxdata,omitempty"`
	LifeTimeJitter   uint32                          `protobuf:"varint,10,opt,name=life_time_jitter,json=lifeTimeJitter,proto3" json:"life_time_jitter,omitempty"`
	Handover         uint32                          `protobuf:"varint,11,opt,name=handover,proto3" json:"handover,omitempty"`
	IpsecOverUdpport uint32                          `protobuf:"varint,12,opt,name=ipsec_over_udpport,json=ipsecOverUdpport,proto3" json:"ipsec_over_udpport,omitempty"`
	TunnelInterface  string                          `protobuf:"bytes,13,opt,name=tunnel_interface,json=tunnelInterface,proto3" json:"tunnel_interface,omitempty"`
	DisableNatt      bool                            `protobuf:"varint,14,opt,name=disable_natt,json=disableNatt,proto3" json:"disable_natt,omitempty"`
	UdpEncap         bool                            `protobuf:"varint,15,opt,name=udp_encap,json=udpEncap,proto3" json:"udp_encap,omitempty"`
}

func (x *Ikev2Profile) Reset() {
	*x = Ikev2Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ikev2Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ikev2Profile) ProtoMessage() {}

func (x *Ikev2Profile) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ikev2Profile.ProtoReflect.Descriptor instead.
func (*Ikev2Profile) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{0}
}

func (x *Ikev2Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ikev2Profile) GetAuth() *Ikev2Profile_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Ikev2Profile) GetId() []*Ikev2Profile_EndId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ikev2Profile) GetResponder() *Ikev2Profile_ResponderInfo {
	if x != nil {
		return x.Responder
	}
	return nil
}

func (x *Ikev2Profile) GetTrafficSelector() []*Ikev2Profile_TrafficSelector {
	if x != nil {
		return x.TrafficSelector
	}
	return nil
}

func (x *Ikev2Profile) GetIkeTransforms() *Ikev2Profile_IkeTransforms {
	if x != nil {
		return x.IkeTransforms
	}
	return nil
}

func (x *Ikev2Profile) GetEspTransforms() *Ikev2Profile_EspTransforms {
	if x != nil {
		return x.EspTransforms
	}
	return nil
}

func (x *Ikev2Profile) GetLifeTime() uint64 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *Ikev2Profile) GetLifeTimeMaxdata() uint64 {
	if x != nil {
		return x.LifeTimeMaxdata
	}
	return 0
}

func (x *Ikev2Profile) GetLifeTimeJitter() uint32 {
	if x != nil {
		return x.LifeTimeJitter
	}
	return 0
}

func (x *Ikev2Profile) GetHandover() uint32 {
	if x != nil {
		return x.Handover
	}
	return 0
}

func (x *Ikev2Profile) GetIpsecOverUdpport() uint32 {
	if x != nil {
		return x.IpsecOverUdpport
	}
	return 0
}

func (x *Ikev2Profile) GetTunnelInterface() string {
	if x != nil {
		return x.TunnelInterface
	}
	return ""
}

func (x *Ikev2Profile) GetDisableNatt() bool {
	if x != nil {
		return x.DisableNatt
	}
	return false
}

func (x *Ikev2Profile) GetUdpEncap() bool {
	if x != nil {
		return x.UdpEncap
	}
	return false
}

type Ikev2Profile_Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method AuthMethod `protobuf:"varint,1,opt,name=method,proto3,enum=ligato.vpp.ikev2.AuthMethod" json:"method,omitempty"`
	Hex    bool       `protobuf:"varint,2,opt,name=hex,proto3" json:"hex,omitempty"`
	Data   []byte     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Ikev2Profile_Auth) Reset() {
	*x = Ikev2Profile_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ikev2Profile_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ikev2Profile_Auth) ProtoMessage() {}

func (x *Ikev2Profile_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ikev2Profile_Auth.ProtoReflect.Descriptor instead.
func (*Ikev2Profile_Auth) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ikev2Profile_Auth) GetMethod() AuthMethod {
	if x != nil {
		return x.Method
	}
	return AuthMethod_NONE_AUTHM
}

func (x *Ikev2Profile_Auth) GetHex() bool {
	if x != nil {
		return x.Hex
	}
	return false
}

func (x *Ikev2Profile_Auth) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Ikev2Profile_EndId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    IDType `protobuf:"varint,1,opt,name=type,proto3,enum=ligato.vpp.ikev2.IDType" json:"type,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IsLocal bool   `protobuf:"varint,3,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
}

func (x *Ikev2Profile_EndId) Reset() {
	*x = Ikev2Profile_EndId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ikev2Profile_EndId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ikev2Profile_EndId) ProtoMessage() {}

func (x *Ikev2Profile_EndId) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ikev2Profile_EndId.ProtoReflect.Descriptor instead.
func (*Ikev2Profile_EndId) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ikev2Profile_EndId) GetType() IDType {
	if x != nil {
		return x.Type
	}
	return IDType_NONE_IDTYPE
}

func (x *Ikev2Profile_EndId) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Ikev2Profile_EndId) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

type Ikev2Profile_ResponderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Addr      string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *Ikev2Profile_ResponderInfo) Reset() {
	*x = Ikev2Profile_ResponderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ikev2Profile_ResponderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ikev2Profile_ResponderInfo) ProtoMessage() {}

func (x *Ikev2Profile_ResponderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ikev2Profile_ResponderInfo.ProtoReflect.Descriptor instead.
func (*Ikev2Profile_ResponderInfo) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Ikev2Profile_ResponderInfo) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *Ikev2Profile_ResponderInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type Ikev2Profile_TrafficSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaIndex      uint32 `protobuf:"varint,1,opt,name=sa_index,json=saIndex,proto3" json:"sa_index,omitempty"`
	ChildSaIndex uint32 `protobuf:"varint,2,opt,name=child_sa_index,json=childSaIndex,proto3" json:"child_sa_index,omitempty"`
	Protocol     uint32 `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	IsLocal      bool   `protobuf:"varint,4,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	StartPort    uint32 `protobuf:"varint,5,opt,name=start_port,json=startPort,proto3" json:"start_port,omitempty"`
	EndPort      uint32 `protobuf:"varint,6,opt,name=end_port,json=endPort,proto3" json:"end_port,omitempty"`
	StartAddr    string `protobuf:"bytes,7,opt,name=start_addr,json=startAddr,proto3" json:"start_addr,omitempty"`
	EndAddr      string `protobuf:"bytes,8,opt,name=end_addr,json=endAddr,proto3" json:"end_addr,omitempty"`
}

func (x *Ikev2Profile_TrafficSelector) Reset() {
	*x = Ikev2Profile_TrafficSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ikev2Profile_TrafficSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ikev2Profile_TrafficSelector) ProtoMessage() {}

func (x *Ikev2Profile_TrafficSelector) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ikev2Profile_TrafficSelector.ProtoReflect.Descriptor instead.
func (*Ikev2Profile_TrafficSelector) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Ikev2Profile_TrafficSelector) GetSaIndex() uint32 {
	if x != nil {
		return x.SaIndex
	}
	return 0
}

func (x *Ikev2Profile_TrafficSelector) GetChildSaIndex() uint32 {
	if x != nil {
		return x.ChildSaIndex
	}
	return 0
}

func (x *Ikev2Profile_TrafficSelector) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Ikev2Profile_TrafficSelector) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *Ikev2Profile_TrafficSelector) GetStartPort() uint32 {
	if x != nil {
		return x.StartPort
	}
	return 0
}

func (x *Ikev2Profile_TrafficSelector) GetEndPort() uint32 {
	if x != nil {
		return x.EndPort
	}
	return 0
}

func (x *Ikev2Profile_TrafficSelector) GetStartAddr() string {
	if x != nil {
		return x.StartAddr
	}
	return ""
}

func (x *Ikev2Profile_TrafficSelector) GetEndAddr() string {
	if x != nil {
		return x.EndAddr
	}
	return ""
}

type Ikev2Profile_IkeTransforms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoAlg     CryptoAlg `protobuf:"varint,1,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=ligato.vpp.ikev2.CryptoAlg" json:"crypto_alg,omitempty"`
	CryptoKeySize uint32    `protobuf:"varint,2,opt,name=crypto_key_size,json=cryptoKeySize,proto3" json:"crypto_key_size,omitempty"`
	IntegAlg      IntegAlg  `protobuf:"varint,3,opt,name=integ_alg,json=integAlg,proto3,enum=ligato.vpp.ikev2.IntegAlg" json:"integ_alg,omitempty"`
	DhType        DHType    `protobuf:"varint,4,opt,name=dh_type,json=dhType,proto3,enum=ligato.vpp.ikev2.DHType" json:"dh_type,omitempty"`
}

func (x *Ikev2Profile_IkeTransforms) Reset() {
	*x = Ikev2Profile_IkeTransforms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ikev2Profile_IkeTransforms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ikev2Profile_IkeTransforms) ProtoMessage() {}

func (x *Ikev2Profile_IkeTransforms) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ikev2Profile_IkeTransforms.ProtoReflect.Descriptor instead.
func (*Ikev2Profile_IkeTransforms) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Ikev2Profile_IkeTransforms) GetCryptoAlg() CryptoAlg {
	if x != nil {
		return x.CryptoAlg
	}
	return CryptoAlg_CRYPTO_NONE
}

func (x *Ikev2Profile_IkeTransforms) GetCryptoKeySize() uint32 {
	if x != nil {
		return x.CryptoKeySize
	}
	return 0
}

func (x *Ikev2Profile_IkeTransforms) GetIntegAlg() IntegAlg {
	if x != nil {
		return x.IntegAlg
	}
	return IntegAlg_AUTH_NONE
}

func (x *Ikev2Profile_IkeTransforms) GetDhType() DHType {
	if x != nil {
		return x.DhType
	}
	return DHType_DH_NONE
}

type Ikev2Profile_EspTransforms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoAlg     CryptoAlg `protobuf:"varint,1,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=ligato.vpp.ikev2.CryptoAlg" json:"crypto_alg,omitempty"`
	CryptoKeySize uint32    `protobuf:"varint,2,opt,name=crypto_key_size,json=cryptoKeySize,proto3" json:"crypto_key_size,omitempty"`
	IntegAlg      IntegAlg  `protobuf:"varint,3,opt,name=integ_alg,json=integAlg,proto3,enum=ligato.vpp.ikev2.IntegAlg" json:"integ_alg,omitempty"`
}

func (x *Ikev2Profile_EspTransforms) Reset() {
	*x = Ikev2Profile_EspTransforms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ikev2Profile_EspTransforms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ikev2Profile_EspTransforms) ProtoMessage() {}

func (x *Ikev2Profile_EspTransforms) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ikev2_ikev2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ikev2Profile_EspTransforms.ProtoReflect.Descriptor instead.
func (*Ikev2Profile_EspTransforms) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Ikev2Profile_EspTransforms) GetCryptoAlg() CryptoAlg {
	if x != nil {
		return x.CryptoAlg
	}
	return CryptoAlg_CRYPTO_NONE
}

func (x *Ikev2Profile_EspTransforms) GetCryptoKeySize() uint32 {
	if x != nil {
		return x.CryptoKeySize
	}
	return 0
}

func (x *Ikev2Profile_EspTransforms) GetIntegAlg() IntegAlg {
	if x != nil {
		return x.IntegAlg
	}
	return IntegAlg_AUTH_NONE
}

var File_ligato_vpp_ikev2_ikev2_proto protoreflect.FileDescriptor

var file_ligato_vpp_ikev2_ikev2_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x69, 0x6b, 0x65,
	0x76, 0x32, 0x2f, 0x69, 0x6b, 0x65, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32,
	0x1a, 0x18, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x0d, 0x0a, 0x0c, 0x49,
	0x6b, 0x65, 0x76, 0x32, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32,
	0x2e, 0x49, 0x6b, 0x65, 0x76, 0x32, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70,
	0x70, 0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32, 0x2e, 0x49, 0x6b, 0x65, 0x76, 0x32, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69,
	0x6b, 0x65, 0x76, 0x32, 0x2e, 0x49, 0x6b, 0x65, 0x76, 0x32, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70,
	0x70, 0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32, 0x2e, 0x49, 0x6b, 0x65, 0x76, 0x32, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32,
	0x2e, 0x49, 0x6b, 0x65, 0x76, 0x32, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x6b,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x0d, 0x69, 0x6b, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x65, 0x73,
	0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e,
	0x69, 0x6b, 0x65, 0x76, 0x32, 0x2e, 0x49, 0x6b, 0x65, 0x76, 0x32, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x45, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x52, 0x0d, 0x65, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x61, 0x78, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x66, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x12, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x64, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0x82, 0x7d, 0x06, 0x12,
	0x04, 0x10, 0xff, 0xff, 0x03, 0x52, 0x10, 0x69, 0x70, 0x73, 0x65, 0x63, 0x4f, 0x76, 0x65, 0x72,
	0x55, 0x64, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x74, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x74, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x64, 0x70, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x1a, 0x62, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x68,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x64, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32,
	0x2e, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x1a, 0x48, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x7d, 0x02, 0x08, 0x01,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x1a, 0xa1, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x61,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73,
	0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x53, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0x82, 0x7d, 0x06, 0x12, 0x04, 0x10, 0xff, 0xff,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09,
	0x82, 0x7d, 0x06, 0x12, 0x04, 0x10, 0xff, 0xff, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x7d, 0x02, 0x08, 0x01, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x7d, 0x02, 0x08,
	0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x1a, 0xdf, 0x01, 0x0a, 0x0d, 0x49,
	0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6b,
	0x65, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x52, 0x09, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70,
	0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32, 0x2e, 0x44, 0x48,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x64, 0x68, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xac, 0x01, 0x0a,
	0x0d, 0x45, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x3a,
	0x0a, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e,
	0x69, 0x6b, 0x65, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x52,
	0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76,
	0x70, 0x70, 0x2e, 0x69, 0x6b, 0x65, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c,
	0x67, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x2a, 0x3d, 0x0a, 0x0a, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x4e,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x53, 0x41,
	0x5f, 0x53, 0x49, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x2a, 0x95, 0x01, 0x0a, 0x06, 0x49,
	0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x44, 0x5f, 0x46,
	0x51, 0x44, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x5f, 0x52, 0x46, 0x43, 0x38,
	0x32, 0x32, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x44, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x4e, 0x31, 0x5f, 0x44, 0x4e, 0x10, 0x09, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x4e, 0x31, 0x5f, 0x47,
	0x4e, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x44,
	0x10, 0x0b, 0x2a, 0x90, 0x02, 0x0a, 0x09, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x53, 0x5f,
	0x49, 0x56, 0x36, 0x34, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
	0x5f, 0x44, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
	0x5f, 0x33, 0x44, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x5f, 0x52, 0x43, 0x35, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x5f, 0x49, 0x44, 0x45, 0x41, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x4f, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x4f, 0x5f, 0x42, 0x4c, 0x4f, 0x57, 0x46, 0x49, 0x53, 0x48, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x33, 0x49, 0x44, 0x45, 0x41, 0x10, 0x08,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x53, 0x5f, 0x49,
	0x56, 0x33, 0x32, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52,
	0x59, 0x50, 0x54, 0x4f, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x54, 0x52, 0x10, 0x0d, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x47, 0x43, 0x4d,
	0x5f, 0x31, 0x36, 0x10, 0x14, 0x2a, 0xdf, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41,
	0x6c, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x4d,
	0x44, 0x35, 0x5f, 0x39, 0x36, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x39, 0x36, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4b, 0x50, 0x44, 0x4b, 0x5f, 0x4d, 0x44,
	0x35, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x58, 0x43, 0x42, 0x43, 0x5f, 0x39, 0x36, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x4d, 0x44, 0x35, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x31, 0x5f, 0x31, 0x36, 0x30, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x4d, 0x41, 0x43, 0x5f, 0x39, 0x36, 0x10, 0x08, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47,
	0x4d, 0x41, 0x43, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x45,
	0x53, 0x5f, 0x31, 0x39, 0x32, 0x5f, 0x47, 0x4d, 0x41, 0x43, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x4d, 0x41,
	0x43, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x48, 0x4d, 0x41, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x0c, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x32, 0x5f, 0x33, 0x38, 0x34, 0x5f, 0x31, 0x39, 0x32, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x35, 0x31,
	0x32, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x0e, 0x2a, 0xf9, 0x01, 0x0a, 0x06, 0x44, 0x48, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x48, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x50, 0x5f, 0x37, 0x36, 0x38, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x4f, 0x44, 0x50, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x4f, 0x44, 0x50, 0x5f, 0x31, 0x35, 0x33, 0x36, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x4f, 0x44, 0x50, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f,
	0x44, 0x50, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44,
	0x50, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x50,
	0x5f, 0x36, 0x31, 0x34, 0x34, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x50, 0x5f,
	0x38, 0x31, 0x39, 0x32, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43, 0x50, 0x5f, 0x32, 0x35,
	0x36, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43, 0x50, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x14,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43, 0x50, 0x5f, 0x35, 0x32, 0x31, 0x10, 0x15, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x4f, 0x44, 0x50, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x5f, 0x31, 0x36, 0x30, 0x10, 0x16,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x50, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x5f, 0x32, 0x32,
	0x34, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x50, 0x5f, 0x32, 0x30, 0x34, 0x38,
	0x5f, 0x32, 0x35, 0x36, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43, 0x50, 0x5f, 0x31, 0x39,
	0x32, 0x10, 0x19, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x6f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70,
	0x70, 0x2f, 0x69, 0x6b, 0x65, 0x76, 0x32, 0x3b, 0x76, 0x70, 0x70, 0x5f, 0x69, 0x6b, 0x65, 0x76,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ligato_vpp_ikev2_ikev2_proto_rawDescOnce sync.Once
	file_ligato_vpp_ikev2_ikev2_proto_rawDescData = file_ligato_vpp_ikev2_ikev2_proto_rawDesc
)

func file_ligato_vpp_ikev2_ikev2_proto_rawDescGZIP() []byte {
	file_ligato_vpp_ikev2_ikev2_proto_rawDescOnce.Do(func() {
		file_ligato_vpp_ikev2_ikev2_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_vpp_ikev2_ikev2_proto_rawDescData)
	})
	return file_ligato_vpp_ikev2_ikev2_proto_rawDescData
}

var file_ligato_vpp_ikev2_ikev2_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ligato_vpp_ikev2_ikev2_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ligato_vpp_ikev2_ikev2_proto_goTypes = []interface{}{
	(AuthMethod)(0),                      // 0: ligato.vpp.ikev2.AuthMethod
	(IDType)(0),                          // 1: ligato.vpp.ikev2.IDType
	(CryptoAlg)(0),                       // 2: ligato.vpp.ikev2.CryptoAlg
	(IntegAlg)(0),                        // 3: ligato.vpp.ikev2.IntegAlg
	(DHType)(0),                          // 4: ligato.vpp.ikev2.DHType
	(*Ikev2Profile)(nil),                 // 5: ligato.vpp.ikev2.Ikev2Profile
	(*Ikev2Profile_Auth)(nil),            // 6: ligato.vpp.ikev2.Ikev2Profile.Auth
	(*Ikev2Profile_EndId)(nil),           // 7: ligato.vpp.ikev2.Ikev2Profile.EndId
	(*Ikev2Profile_ResponderInfo)(nil),   // 8: ligato.vpp.ikev2.Ikev2Profile.ResponderInfo
	(*Ikev2Profile_TrafficSelector)(nil), // 9: ligato.vpp.ikev2.Ikev2Profile.TrafficSelector
	(*Ikev2Profile_IkeTransforms)(nil),   // 10: ligato.vpp.ikev2.Ikev2Profile.IkeTransforms
	(*Ikev2Profile_EspTransforms)(nil),   // 11: ligato.vpp.ikev2.Ikev2Profile.EspTransforms
}
var file_ligato_vpp_ikev2_ikev2_proto_depIdxs = []int32{
	6,  // 0: ligato.vpp.ikev2.Ikev2Profile.auth:type_name -> ligato.vpp.ikev2.Ikev2Profile.Auth
	7,  // 1: ligato.vpp.ikev2.Ikev2Profile.id:type_name -> ligato.vpp.ikev2.Ikev2Profile.EndId
	8,  // 2: ligato.vpp.ikev2.Ikev2Profile.responder:type_name -> ligato.vpp.ikev2.Ikev2Profile.ResponderInfo
	9,  // 3: ligato.vpp.ikev2.Ikev2Profile.traffic_selector:type_name -> ligato.vpp.ikev2.Ikev2Profile.TrafficSelector
	10, // 4: ligato.vpp.ikev2.Ikev2Profile.ike_transforms:type_name -> ligato.vpp.ikev2.Ikev2Profile.IkeTransforms
	11, // 5: ligato.vpp.ikev2.Ikev2Profile.esp_transforms:type_name -> ligato.vpp.ikev2.Ikev2Profile.EspTransforms
	0,  // 6: ligato.vpp.ikev2.Ikev2Profile.Auth.method:type_name -> ligato.vpp.ikev2.AuthMethod
	1,  // 7: ligato.vpp.ikev2.Ikev2Profile.EndId.type:type_name -> ligato.vpp.ikev2.IDType
	2,  // 8: ligato.vpp.ikev2.Ikev2Profile.IkeTransforms.crypto_alg:type_name -> ligato.vpp.ikev2.CryptoAlg
	3,  // 9: ligato.vpp.ikev2.Ikev2Profile.IkeTransforms.integ_alg:type_name -> ligato.vpp.ikev2.IntegAlg
	4,  // 10: ligato.vpp.ikev2.Ikev2Profile.IkeTransforms.dh_type:type_name -> ligato.vpp.ikev2.DHType
	2,  // 11: ligato.vpp.ikev2.Ikev2Profile.EspTransforms.crypto_alg:type_name -> ligato.vpp.ikev2.CryptoAlg
	3,  // 12: ligato.vpp.ikev2.Ikev2Profile.EspTransforms.integ_alg:type_name -> ligato.vpp.ikev2.IntegAlg
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_ligato_vpp_ikev2_ikev2_proto_init() }
func file_ligato_vpp_ikev2_ikev2_proto_init() {
	if File_ligato_vpp_ikev2_ikev2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_vpp_ikev2_ikev2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ikev2Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ikev2_ikev2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ikev2Profile_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ikev2_ikev2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ikev2Profile_EndId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ikev2_ikev2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ikev2Profile_ResponderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ikev2_ikev2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ikev2Profile_TrafficSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ikev2_ikev2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ikev2Profile_IkeTransforms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ikev2_ikev2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ikev2Profile_EspTransforms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_vpp_ikev2_ikev2_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_vpp_ikev2_ikev2_proto_goTypes,
		DependencyIndexes: file_ligato_vpp_ikev2_ikev2_proto_depIdxs,
		EnumInfos:         file_ligato_vpp_ikev2_ikev2_proto_enumTypes,
		MessageInfos:      file_ligato_vpp_ikev2_ikev2_proto_msgTypes,
	}.Build()
	File_ligato_vpp_ikev2_ikev2_proto = out.File
	file_ligato_vpp_ikev2_ikev2_proto_rawDesc = nil
	file_ligato_vpp_ikev2_ikev2_proto_goTypes = nil
	file_ligato_vpp_ikev2_ikev2_proto_depIdxs = nil
}
